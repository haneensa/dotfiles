From e1db20d6ec5900d044b829d3f75dc0006d48a401 Mon Sep 17 00:00:00 2001
From: Haneen Mohammed <hamohammed.sa@gmail.com>
Date: Mon, 2 Mar 2015 01:51:11 +0300
Subject: [PATCH] test 5

Signed-off-by: Haneen Mohammed <hamohammed.sa@gmail.com>
---
 drivers/staging/lustre/lustre/ldlm/ldlm_request.c | 32 +++++++++++------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/lustre/lustre/ldlm/ldlm_request.c b/drivers/staging/lustre/lustre/ldlm/ldlm_request.c
index 751c5d3..2e3201b 100644
--- a/drivers/staging/lustre/lustre/ldlm/ldlm_request.c
+++ b/drivers/staging/lustre/lustre/ldlm/ldlm_request.c
@@ -98,17 +98,17 @@ int ldlm_expired_completion_wait(void *data)
 		static unsigned long next_dump, last_dump;
 
 		LCONSOLE_WARN("lock timed out (enqueued at "CFS_TIME_T", "
-				CFS_DURATION_T"sd ago)\n",
-				lock->l_last_actidvity,
-				cfs_time_sub(get_sdeconds(),
-				lock->l_last_actividty));
-		LDLM_DEBUG(lock,
-				 "lock timed out (enqueued at "
-				CFS_TIME_T ", " CFS_DURATION_T
-				"s ago); not entering recovery in server code, just going back to sleep",
+				CFS_DURATION_T"s ago)\n",
 				lock->l_last_activity,
 				cfs_time_sub(get_seconds(),
 				lock->l_last_activity));
+		LDLM_DEBUG(lock,
+			  "lock timed out (enqueued at "
+			  CFS_TIME_T ", " CFS_DURATION_T
+			  "s ago); not entering recovery in server code, just going back to sleep",
+			  lock->l_last_activity,
+			  cfs_time_sub(get_seconds(),
+			  lock->l_last_activity));
 		if (cfs_time_after(cfs_time_current(), next_dump)) {
 			last_dump = next_dump;
 			next_dump = cfs_time_shift(300);
@@ -558,8 +558,8 @@ int ldlm_cli_enqueue_fini(struct obd_export *exp, struct ptlrpc_request *req,
 			goto cleanup;
 		} else if (unlikely(size > lvb_len)) {
 			LDLM_ERROR(lock,
-					"Replied LVB is larger than expectation, expected = %d, replied = %d",
-					lvb_len, size);
+				  "Replied LVB is larger than expectation, expected = %d, replied = %d",
+				   lvb_len, size);
 			rc = -EINVAL;
 			goto cleanup;
 		}
@@ -1112,7 +1112,7 @@ static __u64 ldlm_cli_cancel_local(struct ldlm_lock *lock)
 
 		if (local_only) {
 			CDEBUG(D_DLMTRACE,
-					"not sending request (at caller's instruction)\n");
+				"not sending request (at caller's instruction)\n");
 			rc = LDLM_FL_LOCAL_ONLY;
 		}
 		ldlm_lock_cancel(lock);
@@ -1228,9 +1228,9 @@ int ldlm_cli_cancel_req(struct obd_export *exp, struct list_head *cancels,
 		}
 		if (rc == LUSTRE_ESTALE) {
 			CDEBUG(D_DLMTRACE,
-					"client/server (nid %s) out of sync -- not fatal\n",
-					libcfs_nid2str(req->rq_import->
-					imp_connection->c_peer.nid));
+				"client/server (nid %s) out of sync -- not fatal\n",
+				libcfs_nid2str(req->rq_import->
+				imp_connection->c_peer.nid));
 			rc = 0;
 		} else if (rc == -ETIMEDOUT && /* check there was no reconnect*/
 			   req->rq_import_generation == imp->imp_generation) {
@@ -2254,8 +2254,8 @@ static void ldlm_cancel_unused_locks_for_replay(struct ldlm_namespace *ns)
 	LIST_HEAD(cancels);
 
 	CDEBUG(D_DLMTRACE,
-			"Dropping as many unused locks as possible before replay for namespace %s (%d)\n",
-			ldlm_ns_name(ns), ns->ns_nr_unused);
+		"Dropping as many unused locks as possible before replay for namespace %s (%d)\n",
+		ldlm_ns_name(ns), ns->ns_nr_unused);
 
 	/* We don't need to care whether or not LRU resize is enabled
 	 * because the LDLM_CANCEL_NO_WAIT policy doesn't use the
-- 
1.9.1

