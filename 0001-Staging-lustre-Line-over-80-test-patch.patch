From f4cbc4e5d00a5eed4e2aaecf363e6254fae0ffbf Mon Sep 17 00:00:00 2001
From: Haneen Mohammed <hamohammed.sa@gmail.com>
Date: Mon, 2 Mar 2015 02:36:29 +0300
Subject: [PATCH] Staging: lustre: Line over 80 test patch

Signed-off-by: Haneen Mohammed <hamohammed.sa@gmail.com>
---
 drivers/staging/lustre/lustre/ldlm/ldlm_request.c | 32 +++++++++++------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/lustre/lustre/ldlm/ldlm_request.c b/drivers/staging/lustre/lustre/ldlm/ldlm_request.c
index 2e3201b..04760ec 100644
--- a/drivers/staging/lustre/lustre/ldlm/ldlm_request.c
+++ b/drivers/staging/lustre/lustre/ldlm/ldlm_request.c
@@ -98,17 +98,17 @@ int ldlm_expired_completion_wait(void *data)
 		static unsigned long next_dump, last_dump;
 
 		LCONSOLE_WARN("lock timed out (enqueued at "CFS_TIME_T", "
-				CFS_DURATION_T"s ago)\n",
-				lock->l_last_activity,
-				cfs_time_sub(get_seconds(),
-				lock->l_last_activity));
+				CFS_DURATION_T"sd ago)\n",
+				lock->l_last_actidvity,
+				cfs_time_sub(get_sdeconds(),
+				lock->l_last_actividty));
 		LDLM_DEBUG(lock,
-			  "lock timed out (enqueued at "
-			  CFS_TIME_T ", " CFS_DURATION_T
-			  "s ago); not entering recovery in server code, just going back to sleep",
-			  lock->l_last_activity,
-			  cfs_time_sub(get_seconds(),
-			  lock->l_last_activity));
+			   "lock timed out (enqueued at "
+			   CFS_TIME_T ", " CFS_DURATION_T
+			   "s ago); not entering recovery in server code, just going back to sleep",
+			   lock->l_last_activity,
+			   cfs_time_sub(get_seconds(),
+			   lock->l_last_activity));
 		if (cfs_time_after(cfs_time_current(), next_dump)) {
 			last_dump = next_dump;
 			next_dump = cfs_time_shift(300);
@@ -194,7 +194,7 @@ int ldlm_completion_ast_async(struct ldlm_lock *lock, __u64 flags, void *data)
 	}
 
 	LDLM_DEBUG(lock,
-			"client-side enqueue returned a blocked lock, going forward");
+		   "client-side enqueue returned a blocked lock, going forward");
 	ldlm_reprocess_all(lock->l_resource);
 	return 0;
 }
@@ -243,7 +243,7 @@ int ldlm_completion_ast(struct ldlm_lock *lock, __u64 flags, void *data)
 	}
 
 	LDLM_DEBUG(lock,
-			"client-side enqueue returned a blocked lock, sleeping");
+		   "client-side enqueue returned a blocked lock, sleeping");
 
 noreproc:
 
@@ -326,7 +326,7 @@ int ldlm_blocking_ast_nocheck(struct ldlm_lock *lock)
 			CERROR("ldlm_cli_cancel: %d\n", rc);
 	} else {
 		LDLM_DEBUG(lock,
-				"Lock still has references, will be cancelled later");
+			   "Lock still has references, will be cancelled later");
 	}
 	return 0;
 }
@@ -558,8 +558,8 @@ int ldlm_cli_enqueue_fini(struct obd_export *exp, struct ptlrpc_request *req,
 			goto cleanup;
 		} else if (unlikely(size > lvb_len)) {
 			LDLM_ERROR(lock,
-				  "Replied LVB is larger than expectation, expected = %d, replied = %d",
-				   lvb_len, size);
+				   "Replied LVB is larger than expectation, expected = %d, replied = %d",
+					lvb_len, size);
 			rc = -EINVAL;
 			goto cleanup;
 		}
@@ -2264,7 +2264,7 @@ static void ldlm_cancel_unused_locks_for_replay(struct ldlm_namespace *ns)
 					 LCF_LOCAL, LDLM_CANCEL_NO_WAIT);
 
 	CDEBUG(D_DLMTRACE, "Canceled %d unused locks from namespace %s\n",
-			   canceled, ldlm_ns_name(ns));
+	       canceled, ldlm_ns_name(ns));
 }
 
 int ldlm_replay_locks(struct obd_import *imp)
-- 
1.9.1

